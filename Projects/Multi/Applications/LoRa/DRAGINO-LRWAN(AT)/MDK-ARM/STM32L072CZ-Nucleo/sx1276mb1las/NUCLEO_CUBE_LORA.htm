<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\sx1276mb1las\NUCLEO_CUBE_LORA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\sx1276mb1las\NUCLEO_CUBE_LORA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Feb 18 14:47:09 2022
<BR><P>
<H3>Maximum Stack Usage =        836 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; user_key_event &rArr; send_data &rArr; Send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[150]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[150]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_COMP_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[3d]">CMD_GetChar</a> from command.o(i.CMD_GetChar) referenced from command.o(i.CMD_Init)
 <LI><a href="#[21]">DMA1_Channel1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[22]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[23]">DMA1_Channel4_5_6_7_IRQHandler</a> from stm32l0xx_it.o(i.DMA1_Channel4_5_6_7_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1d]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1e]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1f]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[b]">HW_GetBatteryLevel</a> from stm32l0xx_hw.o(i.HW_GetBatteryLevel) referenced 2 times from main.o(.data)
 <LI><a href="#[e]">HW_GetRandomSeed</a> from stm32l0xx_hw.o(i.HW_GetRandomSeed) referenced 2 times from main.o(.data)
 <LI><a href="#[c]">HW_GetTemperatureLevel</a> from stm32l0xx_hw.o(i.HW_GetTemperatureLevel) referenced 2 times from main.o(.data)
 <LI><a href="#[d]">HW_GetUniqueId</a> from stm32l0xx_hw.o(i.HW_GetUniqueId) referenced 2 times from main.o(.data)
 <LI><a href="#[14]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2e]">I2C1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2f]">I2C2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2c]">I2C3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[11]">LORA_ConfirmClass</a> from main.o(i.LORA_ConfirmClass) referenced 2 times from main.o(.data)
 <LI><a href="#[10]">LORA_HasJoined</a> from main.o(i.LORA_HasJoined) referenced 2 times from main.o(.data)
 <LI><a href="#[f]">LORA_RxData</a> from main.o(i.LORA_RxData) referenced 2 times from main.o(.data)
 <LI><a href="#[25]">LPTIM1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[44]">McpsConfirm</a> from lora.o(i.McpsConfirm) referenced from lora.o(i.LORA_Init)
 <LI><a href="#[45]">McpsIndication</a> from lora.o(i.McpsIndication) referenced from lora.o(i.LORA_Init)
 <LI><a href="#[46]">MlmeConfirm</a> from lora.o(i.MlmeConfirm) referenced from lora.o(i.LORA_Init)
 <LI><a href="#[13]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[4c]">OnAckTimeoutTimerEvent</a> from loramac.o(i.OnAckTimeoutTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[55]">OnCertifTxNextPacketTimerEvent</a> from lora-test.o(i.OnCertifTxNextPacketTimerEvent) referenced from lora-test.o(i.certif_rx)
 <LI><a href="#[56]">OnIWDGRefreshTimeoutEvent</a> from main.o(i.OnIWDGRefreshTimeoutEvent) referenced from main.o(i.main)
 <LI><a href="#[48]">OnMacStateCheckTimerEvent</a> from loramac.o(i.OnMacStateCheckTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[58]">OnPressButtonTimeoutEvent</a> from main.o(i.OnPressButtonTimeoutEvent) referenced from main.o(i.user_key_event)
 <LI><a href="#[59]">OnPressButtonTimesLedEvent</a> from main.o(i.OnPressButtonTimesLedEvent) referenced from main.o(i.user_key_event)
 <LI><a href="#[4e]">OnRadioRxDone</a> from loramac.o(i.OnRadioRxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4f]">OnRadioRxError</a> from loramac.o(i.OnRadioRxError) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[51]">OnRadioRxTimeout</a> from loramac.o(i.OnRadioRxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4d]">OnRadioTxDone</a> from loramac.o(i.OnRadioTxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[50]">OnRadioTxTimeout</a> from loramac.o(i.OnRadioTxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4a]">OnRxWindow1TimerEvent</a> from loramac.o(i.OnRxWindow1TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4b]">OnRxWindow2TimerEvent</a> from loramac.o(i.OnRxWindow2TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[49]">OnTxDelayedTimerEvent</a> from loramac.o(i.OnTxDelayedTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[47]">OnTxTimerEvent</a> from main.o(i.OnTxTimerEvent) referenced from main.o(i.LORA_RxData)
 <LI><a href="#[47]">OnTxTimerEvent</a> from main.o(i.OnTxTimerEvent) referenced from main.o(i.OnTxTimerEvent2)
 <LI><a href="#[47]">OnTxTimerEvent</a> from main.o(i.OnTxTimerEvent) referenced from main.o(i.lora_send)
 <LI><a href="#[47]">OnTxTimerEvent</a> from main.o(i.OnTxTimerEvent) referenced from main.o(i.main)
 <LI><a href="#[47]">OnTxTimerEvent</a> from main.o(i.OnTxTimerEvent) referenced from main.o(i.send_ALARM_data)
 <LI><a href="#[47]">OnTxTimerEvent</a> from main.o(i.OnTxTimerEvent) referenced from main.o(i.send_data)
 <LI><a href="#[47]">OnTxTimerEvent</a> from main.o(i.OnTxTimerEvent) referenced from main.o(i.timing)
 <LI><a href="#[42]">OnTxTimerEvent2</a> from main.o(i.OnTxTimerEvent2) referenced from main.o(i.LORA_HasJoined)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1c]">RCC_CRS_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[34]">RNG_LPUART1_IRQHandler</a> from stm32l0xx_it.o(i.RNG_LPUART1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from stm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[64]">SX1276CheckRfFrequency</a> from sx1276mb1las.o(i.SX1276CheckRfFrequency) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[73]">SX1276GetRadioWakeUpTime</a> from sx1276.o(i.SX1276GetRadioWakeUpTime) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5d]">SX1276GetStatus</a> from sx1276.o(i.SX1276GetStatus) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[65]">SX1276GetTimeOnAir</a> from sx1276.o(i.SX1276GetTimeOnAir) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[6]">SX1276GetWakeTime</a> from sx1276mb1las.o(i.SX1276GetWakeTime) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[5c]">SX1276Init</a> from sx1276.o(i.SX1276Init) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5b]">SX1276IoDeInit</a> from sx1276mb1las.o(i.SX1276IoDeInit) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5a]">SX1276IoInit</a> from sx1276mb1las.o(i.SX1276IoInit) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[7]">SX1276IoIrqInit</a> from sx1276mb1las.o(i.SX1276IoIrqInit) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[60]">SX1276IsChannelFree</a> from sx1276.o(i.SX1276IsChannelFree) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[0]">SX1276OnDio0Irq</a> from sx1276.o(i.SX1276OnDio0Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[1]">SX1276OnDio1Irq</a> from sx1276.o(i.SX1276OnDio1Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[2]">SX1276OnDio2Irq</a> from sx1276.o(i.SX1276OnDio2Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[3]">SX1276OnDio3Irq</a> from sx1276.o(i.SX1276OnDio3Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[4]">SX1276OnDio4Irq</a> from sx1276.o(i.SX1276OnDio4Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[52]">SX1276OnTimeoutIrq</a> from sx1276.o(i.SX1276OnTimeoutIrq) referenced from sx1276.o(i.SX1276Init)
 <LI><a href="#[61]">SX1276Random</a> from sx1276.o(i.SX1276Random) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[6e]">SX1276Read</a> from sx1276.o(i.SX1276Read) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[70]">SX1276ReadBuffer</a> from sx1276.o(i.SX1276ReadBuffer) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[6c]">SX1276ReadRssi</a> from sx1276.o(i.SX1276ReadRssi) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[66]">SX1276Send</a> from sx1276.o(i.SX1276Send) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[a]">SX1276SetAntSw</a> from sx1276mb1las.o(i.SX1276SetAntSw) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[9]">SX1276SetAntSwLowPower</a> from sx1276mb1las.o(i.SX1276SetAntSwLowPower) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[5f]">SX1276SetChannel</a> from sx1276.o(i.SX1276SetChannel) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[71]">SX1276SetMaxPayloadLength</a> from sx1276.o(i.SX1276SetMaxPayloadLength) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5e]">SX1276SetModem</a> from sx1276.o(i.SX1276SetModem) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[72]">SX1276SetPublicNetwork</a> from sx1276.o(i.SX1276SetPublicNetwork) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[8]">SX1276SetRfTxPower</a> from sx1276mb1las.o(i.SX1276SetRfTxPower) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[69]">SX1276SetRx</a> from sx1276.o(i.SX1276SetRx) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[62]">SX1276SetRxConfig</a> from sx1276.o(i.SX1276SetRxConfig) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[67]">SX1276SetSleep</a> from sx1276.o(i.SX1276SetSleep) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[68]">SX1276SetStby</a> from sx1276.o(i.SX1276SetStby) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[63]">SX1276SetTxConfig</a> from sx1276.o(i.SX1276SetTxConfig) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[6b]">SX1276SetTxContinuousWave</a> from sx1276.o(i.SX1276SetTxContinuousWave) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[5]">SX1276SetXO</a> from sx1276mb1las.o(i.SX1276SetXO) referenced 2 times from sx1276mb1las.o(.data)
 <LI><a href="#[6a]">SX1276StartCad</a> from sx1276.o(i.SX1276StartCad) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[6d]">SX1276Write</a> from sx1276.o(i.SX1276Write) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[6f]">SX1276WriteBuffer</a> from sx1276.o(i.SX1276WriteBuffer) referenced from sx1276mb1las.o(.constdata)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[2b]">TIM21_IRQHandler</a> from stm32l0xx_it.o(i.TIM21_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2d]">TIM22_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[29]">TIM6_DAC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2a]">TIM7_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[20]">TSC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[53]">Trace_TxCpltCallback</a> from trace.o(i.Trace_TxCpltCallback) referenced from trace.o(i.TraceInit)
 <LI><a href="#[3e]">UART_DMAAbortOnError</a> from stm32l0xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[41]">UART_DMAError</a> from stm32l0xx_hal_uart.o(i.UART_DMAError) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[3f]">UART_DMATransmitCplt</a> from stm32l0xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[40]">UART_DMATxHalfCplt</a> from stm32l0xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[32]">USART1_IRQHandler</a> from stm32l0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[26]">USART4_5_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[35]">USB_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[3a]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[39]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[54]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[b7]">at_ACE_get</a> from at.o(i.at_ACE_get) referenced from command.o(.constdata)
 <LI><a href="#[b8]">at_ACE_set</a> from at.o(i.at_ACE_set) referenced from command.o(.constdata)
 <LI><a href="#[83]">at_ADR_get</a> from at.o(i.at_ADR_get) referenced from command.o(.constdata)
 <LI><a href="#[84]">at_ADR_set</a> from at.o(i.at_ADR_set) referenced from command.o(.constdata)
 <LI><a href="#[81]">at_AppEUI_get</a> from at.o(i.at_AppEUI_get) referenced from command.o(.constdata)
 <LI><a href="#[82]">at_AppEUI_set</a> from at.o(i.at_AppEUI_set) referenced from command.o(.constdata)
 <LI><a href="#[7b]">at_AppKey_get</a> from at.o(i.at_AppKey_get) referenced from command.o(.constdata)
 <LI><a href="#[7c]">at_AppKey_set</a> from at.o(i.at_AppKey_set) referenced from command.o(.constdata)
 <LI><a href="#[7f]">at_AppSKey_get</a> from at.o(i.at_AppSKey_get) referenced from command.o(.constdata)
 <LI><a href="#[80]">at_AppSKey_set</a> from at.o(i.at_AppSKey_set) referenced from command.o(.constdata)
 <LI><a href="#[dd]">at_BAT_get</a> from at.o(i.at_BAT_get) referenced from command.o(.constdata)
 <LI><a href="#[dc]">at_CAL</a> from at.o(i.at_CAL) referenced from command.o(.constdata)
 <LI><a href="#[db]">at_CFG_run</a> from at.o(i.at_CFG_run) referenced from command.o(.constdata)
 <LI><a href="#[d9]">at_CHE_get</a> from at.o(i.at_CHE_get) referenced from command.o(.constdata)
 <LI><a href="#[da]">at_CHE_set</a> from at.o(i.at_CHE_set) referenced from command.o(.constdata)
 <LI><a href="#[d7]">at_CHS_get</a> from at.o(i.at_CHS_get) referenced from command.o(.constdata)
 <LI><a href="#[d8]">at_CHS_set</a> from at.o(i.at_CHS_set) referenced from command.o(.constdata)
 <LI><a href="#[74]">at_DEBUG_run</a> from at.o(i.at_DEBUG_run) referenced from command.o(.constdata)
 <LI><a href="#[87]">at_DataRate_get</a> from at.o(i.at_DataRate_get) referenced from command.o(.constdata)
 <LI><a href="#[88]">at_DataRate_set</a> from at.o(i.at_DataRate_set) referenced from command.o(.constdata)
 <LI><a href="#[79]">at_DevAddr_get</a> from at.o(i.at_DevAddr_get) referenced from command.o(.constdata)
 <LI><a href="#[7a]">at_DevAddr_set</a> from at.o(i.at_DevAddr_set) referenced from command.o(.constdata)
 <LI><a href="#[77]">at_DevEUI_get</a> from at.o(i.at_DevEUI_get) referenced from command.o(.constdata)
 <LI><a href="#[78]">at_DevEUI_set</a> from at.o(i.at_DevEUI_set) referenced from command.o(.constdata)
 <LI><a href="#[a1]">at_DeviceClass_get</a> from at.o(i.at_DeviceClass_get) referenced from command.o(.constdata)
 <LI><a href="#[a2]">at_DeviceClass_set</a> from at.o(i.at_DeviceClass_set) referenced from command.o(.constdata)
 <LI><a href="#[9f]">at_DownlinkCounter_get</a> from at.o(i.at_DownlinkCounter_get) referenced from command.o(.constdata)
 <LI><a href="#[a0]">at_DownlinkCounter_set</a> from at.o(i.at_DownlinkCounter_set) referenced from command.o(.constdata)
 <LI><a href="#[89]">at_DutyCycle_get</a> from at.o(i.at_DutyCycle_get) referenced from command.o(.constdata)
 <LI><a href="#[8a]">at_DutyCycle_set</a> from at.o(i.at_DutyCycle_set) referenced from command.o(.constdata)
 <LI><a href="#[a9]">at_DwellTime_get</a> from at.o(i.at_DwellTime_get) referenced from command.o(.constdata)
 <LI><a href="#[aa]">at_DwellTime_set</a> from at.o(i.at_DwellTime_set) referenced from command.o(.constdata)
 <LI><a href="#[76]">at_FDR</a> from at.o(i.at_FDR) referenced from command.o(.constdata)
 <LI><a href="#[a3]">at_Join</a> from at.o(i.at_Join) referenced from command.o(.constdata)
 <LI><a href="#[95]">at_JoinAcceptDelay1_get</a> from at.o(i.at_JoinAcceptDelay1_get) referenced from command.o(.constdata)
 <LI><a href="#[96]">at_JoinAcceptDelay1_set</a> from at.o(i.at_JoinAcceptDelay1_set) referenced from command.o(.constdata)
 <LI><a href="#[97]">at_JoinAcceptDelay2_get</a> from at.o(i.at_JoinAcceptDelay2_get) referenced from command.o(.constdata)
 <LI><a href="#[98]">at_JoinAcceptDelay2_set</a> from at.o(i.at_JoinAcceptDelay2_set) referenced from command.o(.constdata)
 <LI><a href="#[b9]">at_KAT_get</a> from at.o(i.at_KAT_get) referenced from command.o(.constdata)
 <LI><a href="#[ba]">at_KAT_set</a> from at.o(i.at_KAT_set) referenced from command.o(.constdata)
 <LI><a href="#[d5]">at_MOD_get</a> from at.o(i.at_MOD_get) referenced from command.o(.constdata)
 <LI><a href="#[d6]">at_MOD_set</a> from at.o(i.at_MOD_set) referenced from command.o(.constdata)
 <LI><a href="#[d1]">at_NMEA353_get</a> from at.o(i.at_NMEA353_get) referenced from command.o(.constdata)
 <LI><a href="#[d2]">at_NMEA353_set</a> from at.o(i.at_NMEA353_set) referenced from command.o(.constdata)
 <LI><a href="#[d3]">at_NMEA886_get</a> from at.o(i.at_NMEA886_get) referenced from command.o(.constdata)
 <LI><a href="#[d4]">at_NMEA886_set</a> from at.o(i.at_NMEA886_set) referenced from command.o(.constdata)
 <LI><a href="#[9b]">at_NetworkID_get</a> from at.o(i.at_NetworkID_get) referenced from command.o(.constdata)
 <LI><a href="#[9c]">at_NetworkID_set</a> from at.o(i.at_NetworkID_set) referenced from command.o(.constdata)
 <LI><a href="#[99]">at_NetworkJoinMode_get</a> from at.o(i.at_NetworkJoinMode_get) referenced from command.o(.constdata)
 <LI><a href="#[9a]">at_NetworkJoinMode_set</a> from at.o(i.at_NetworkJoinMode_set) referenced from command.o(.constdata)
 <LI><a href="#[a4]">at_NetworkJoinStatus</a> from at.o(i.at_NetworkJoinStatus) referenced from command.o(.constdata)
 <LI><a href="#[7d]">at_NwkSKey_get</a> from at.o(i.at_NwkSKey_get) referenced from command.o(.constdata)
 <LI><a href="#[7e]">at_NwkSKey_set</a> from at.o(i.at_NwkSKey_set) referenced from command.o(.constdata)
 <LI><a href="#[cf]">at_PDOP_get</a> from at.o(i.at_PDOP_get) referenced from command.o(.constdata)
 <LI><a href="#[d0]">at_PDOP_set</a> from at.o(i.at_PDOP_set) referenced from command.o(.constdata)
 <LI><a href="#[8b]">at_PublicNetwork_get</a> from at.o(i.at_PublicNetwork_get) referenced from command.o(.constdata)
 <LI><a href="#[8c]">at_PublicNetwork_set</a> from at.o(i.at_PublicNetwork_set) referenced from command.o(.constdata)
 <LI><a href="#[ab]">at_RJTDC_get</a> from at.o(i.at_RJTDC_get) referenced from command.o(.constdata)
 <LI><a href="#[ac]">at_RJTDC_set</a> from at.o(i.at_RJTDC_set) referenced from command.o(.constdata)
 <LI><a href="#[ad]">at_RPL_get</a> from at.o(i.at_RPL_get) referenced from command.o(.constdata)
 <LI><a href="#[ae]">at_RPL_set</a> from at.o(i.at_RPL_set) referenced from command.o(.constdata)
 <LI><a href="#[a8]">at_Receive</a> from at.o(i.at_Receive) referenced 2 times from command.o(.constdata)
 <LI><a href="#[a7]">at_ReceiveBinary</a> from at.o(i.at_ReceiveBinary) referenced 2 times from command.o(.constdata)
 <LI><a href="#[91]">at_Rx1Delay_get</a> from at.o(i.at_Rx1Delay_get) referenced from command.o(.constdata)
 <LI><a href="#[92]">at_Rx1Delay_set</a> from at.o(i.at_Rx1Delay_set) referenced from command.o(.constdata)
 <LI><a href="#[8f]">at_Rx2DataRate_get</a> from at.o(i.at_Rx2DataRate_get) referenced from command.o(.constdata)
 <LI><a href="#[90]">at_Rx2DataRate_set</a> from at.o(i.at_Rx2DataRate_set) referenced from command.o(.constdata)
 <LI><a href="#[93]">at_Rx2Delay_get</a> from at.o(i.at_Rx2Delay_get) referenced from command.o(.constdata)
 <LI><a href="#[94]">at_Rx2Delay_set</a> from at.o(i.at_Rx2Delay_set) referenced from command.o(.constdata)
 <LI><a href="#[8d]">at_Rx2Frequency_get</a> from at.o(i.at_Rx2Frequency_get) referenced from command.o(.constdata)
 <LI><a href="#[8e]">at_Rx2Frequency_set</a> from at.o(i.at_Rx2Frequency_set) referenced from command.o(.constdata)
 <LI><a href="#[a6]">at_Send</a> from at.o(i.at_Send) referenced from command.o(.constdata)
 <LI><a href="#[a5]">at_SendBinary</a> from at.o(i.at_SendBinary) referenced from command.o(.constdata)
 <LI><a href="#[bf]">at_TDC_get</a> from at.o(i.at_TDC_get) referenced from command.o(.constdata)
 <LI><a href="#[c0]">at_TDC_set</a> from at.o(i.at_TDC_set) referenced from command.o(.constdata)
 <LI><a href="#[85]">at_TransmitPower_get</a> from at.o(i.at_TransmitPower_get) referenced from command.o(.constdata)
 <LI><a href="#[86]">at_TransmitPower_set</a> from at.o(i.at_TransmitPower_set) referenced from command.o(.constdata)
 <LI><a href="#[9d]">at_UplinkCounter_get</a> from at.o(i.at_UplinkCounter_get) referenced from command.o(.constdata)
 <LI><a href="#[9e]">at_UplinkCounter_set</a> from at.o(i.at_UplinkCounter_set) referenced from command.o(.constdata)
 <LI><a href="#[b2]">at_ack_get</a> from at.o(i.at_ack_get) referenced from command.o(.constdata)
 <LI><a href="#[b3]">at_ack_set</a> from at.o(i.at_ack_set) referenced from command.o(.constdata)
 <LI><a href="#[c1]">at_application_port_get</a> from at.o(i.at_application_port_get) referenced from command.o(.constdata)
 <LI><a href="#[c2]">at_application_port_set</a> from at.o(i.at_application_port_set) referenced from command.o(.constdata)
 <LI><a href="#[bb]">at_ftime_get</a> from at.o(i.at_ftime_get) referenced from command.o(.constdata)
 <LI><a href="#[bc]">at_ftime_set</a> from at.o(i.at_ftime_set) referenced from command.o(.constdata)
 <LI><a href="#[b0]">at_hardware_ic_get</a> from at.o(i.at_hardware_ic_get) referenced from command.o(.constdata)
 <LI><a href="#[b1]">at_hardware_ic_set</a> from at.o(i.at_hardware_ic_set) referenced from command.o(.constdata)
 <LI><a href="#[b4]">at_isack_get</a> from at.o(i.at_isack_get) referenced from command.o(.constdata)
 <LI><a href="#[bd]">at_loggps_get</a> from at.o(i.at_loggps_get) referenced from command.o(.constdata)
 <LI><a href="#[be]">at_loggps_set</a> from at.o(i.at_loggps_set) referenced from command.o(.constdata)
 <LI><a href="#[cb]">at_lon_get</a> from at.o(i.at_lon_get) referenced from command.o(.constdata)
 <LI><a href="#[cc]">at_lon_set</a> from at.o(i.at_lon_set) referenced from command.o(.constdata)
 <LI><a href="#[c9]">at_md_get</a> from at.o(i.at_md_get) referenced from command.o(.constdata)
 <LI><a href="#[ca]">at_md_set</a> from at.o(i.at_md_set) referenced from command.o(.constdata)
 <LI><a href="#[cd]">at_mlon_get</a> from at.o(i.at_mlon_get) referenced from command.o(.constdata)
 <LI><a href="#[ce]">at_mlon_set</a> from at.o(i.at_mlon_set) referenced from command.o(.constdata)
 <LI><a href="#[75]">at_reset</a> from at.o(i.at_reset) referenced from command.o(.constdata)
 <LI><a href="#[57]">at_return_error</a> from at.o(i.at_return_error) referenced 75 times from command.o(.constdata)
 <LI><a href="#[57]">at_return_error</a> from at.o(i.at_return_error) referenced from command.o(i.printf_all_config)
 <LI><a href="#[b6]">at_rssi_get</a> from at.o(i.at_rssi_get) referenced from command.o(.constdata)
 <LI><a href="#[c7]">at_sgm_get</a> from at.o(i.at_sgm_get) referenced from command.o(.constdata)
 <LI><a href="#[c8]">at_sgm_set</a> from at.o(i.at_sgm_set) referenced from command.o(.constdata)
 <LI><a href="#[b5]">at_snr_get</a> from at.o(i.at_snr_get) referenced from command.o(.constdata)
 <LI><a href="#[c3]">at_symbtimeout1LSB_get</a> from at.o(i.at_symbtimeout1LSB_get) referenced from command.o(.constdata)
 <LI><a href="#[c4]">at_symbtimeout1LSB_set</a> from at.o(i.at_symbtimeout1LSB_set) referenced from command.o(.constdata)
 <LI><a href="#[c5]">at_symbtimeout2LSB_get</a> from at.o(i.at_symbtimeout2LSB_get) referenced from command.o(.constdata)
 <LI><a href="#[c6]">at_symbtimeout2LSB_set</a> from at.o(i.at_symbtimeout2LSB_set) referenced from command.o(.constdata)
 <LI><a href="#[af]">at_version_get</a> from at.o(i.at_version_get) referenced from command.o(.constdata)
 <LI><a href="#[3c]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[36]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[43]">timing</a> from main.o(i.timing) referenced from main.o(i.LORA_HasJoined)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[310]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[de]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[311]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[312]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[313]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[314]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[315]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[316]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxParamSetupReq
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxConfig
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915AlternateDr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hardware_ic_get
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
</UL>

<P><STRONG><a name="[317]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
</UL>

<P><STRONG><a name="[318]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[319]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[31a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_Identify
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_IoInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_battery_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
</UL>

<P><STRONG><a name="[31c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2f1]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_Identify
</UL>

<P><STRONG><a name="[167]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
</UL>

<P><STRONG><a name="[2e5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copytxdata
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
</UL>

<P><STRONG><a name="[165]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
</UL>

<P><STRONG><a name="[2ef]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copytxdata
</UL>

<P><STRONG><a name="[166]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
</UL>

<P><STRONG><a name="[228]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[31d]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
</UL>

<P><STRONG><a name="[eb]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[ed]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_touint
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_5
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_4
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strtod
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_5
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_4
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DegreeToDMS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_5
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_4
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DegreeToDMS
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_5
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_4
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strtod
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DegreeToDMS
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
</UL>

<P><STRONG><a name="[11d]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[31f]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalYaw
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PDOP_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHE_get
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DegreeToDMS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyro
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strtod
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalYaw
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHE_get
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PDOP_set
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[243]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[320]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strtod
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DegreeToDMS
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyro
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalYaw
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHE_get
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PDOP_set
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DegreeToDMS
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[2a1]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strtod
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INPUT
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DegreeToDMS
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalYaw
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PDOP_get
</UL>

<P><STRONG><a name="[321]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DegreeToDMS
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyro
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strtod
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalYaw
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PDOP_set
</UL>

<P><STRONG><a name="[322]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[2f6]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[323]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[324]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[325]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[ea]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[39]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[326]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[f1]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[108]"></a>_frnd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[f9]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[f8]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10a]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[10b]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[327]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strtod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[107]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[328]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>AES_CMAC_Final</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[118]"></a>AES_CMAC_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AES_CMAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[119]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[11b]"></a>AES_CMAC_Update</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[11c]"></a>AHRSupdate</STRONG> (Thumb, 3584 bytes, Stack size 168 bytes, main.o(i.AHRSupdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = AHRSupdate &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[126]"></a>BSP_battery_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bsp.o(i.BSP_battery_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_battery_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[12a]"></a>BSP_powerLED_Init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, bsp.o(i.BSP_powerLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_powerLED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerLED
</UL>

<P><STRONG><a name="[12b]"></a>BSP_sensor_Init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bsp.o(i.BSP_sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_sensor_Init &rArr; GPS_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_battery_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_INT
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[12d]"></a>BSP_sensor_Read</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp.o(i.BSP_sensor_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_sensor_Read &rArr; HW_GetBatteryLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_BAT_get
</UL>

<P><STRONG><a name="[12f]"></a>CMD_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, command.o(i.CMD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMD_Init &rArr; vcom_ReceiveInit &rArr; HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>CMD_Process</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, command.o(i.CMD_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = CMD_Process &rArr; parse_cmd &rArr; Store_Config &rArr; FLASH_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>CalYaw</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.CalYaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CalYaw &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[138]"></a>CircularQueue_Add</STRONG> (Thumb, 508 bytes, Stack size 72 bytes, queue.o(i.CircularQueue_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>

<P><STRONG><a name="[2ac]"></a>CircularQueue_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.CircularQueue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CircularQueue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceInit
</UL>

<P><STRONG><a name="[2b0]"></a>CircularQueue_Remove</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, queue.o(i.CircularQueue_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CircularQueue_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_TxCpltCallback
</UL>

<P><STRONG><a name="[2ae]"></a>CircularQueue_Sense</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, queue.o(i.CircularQueue_Sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CircularQueue_Sense
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_TxCpltCallback
</UL>

<P><STRONG><a name="[29d]"></a>CountTurns</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, main.o(i.CountTurns))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CountTurns
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[13e]"></a>DBG_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, debug.o(i.DBG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DBG_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStopMode
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStandbyMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGSleepMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.DMA1_Channel4_5_6_7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel4_5_6_7_IRQHandler &rArr; vcom_DMA_TX_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DMA_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>DelayMs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delay.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DelayMs &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_setting
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_INT
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerLED
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[145]"></a>EEPROM_Store_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora.o(i.EEPROM_Store_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = EEPROM_Store_Config &rArr; EEPROM_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hardware_ic_set
</UL>

<P><STRONG><a name="[146]"></a>EEPROM_program</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, flash_eraseprogram.o(i.EEPROM_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = EEPROM_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
</UL>

<P><STRONG><a name="[1d]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>EXTI4_15_IRQHandler_Config</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, gpio_exti.o(i.EXTI4_15_IRQHandler_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI4_15_IRQHandler_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[17b]"></a>FLASH_PageErase</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[151]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
</UL>

<P><STRONG><a name="[153]"></a>FLASH_erase</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flash_eraseprogram.o(i.FLASH_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = FLASH_erase &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_key
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_FDR
</UL>

<P><STRONG><a name="[157]"></a>FLASH_program</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, flash_eraseprogram.o(i.FLASH_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = FLASH_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_key
</UL>

<P><STRONG><a name="[159]"></a>FLASH_program_on_addr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, flash_eraseprogram.o(i.FLASH_program_on_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = FLASH_program_on_addr &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[1fc]"></a>FLASH_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash_eraseprogram.o(i.FLASH_read))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
</UL>

<P><STRONG><a name="[15a]"></a>GPS_DegreeToDMS</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, gps.o(i.GPS_DegreeToDMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GPS_DegreeToDMS &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INPUT
</UL>

<P><STRONG><a name="[15d]"></a>GPS_INFO_update</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gps.o(i.GPS_INFO_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = GPS_INFO_update &rArr; GPS_parse &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INPUT
</UL>

<P><STRONG><a name="[15f]"></a>GPS_INPUT</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, gps.o(i.GPS_INPUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = GPS_INPUT &rArr; GPS_INFO_update &rArr; GPS_parse &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INFO_update
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DegreeToDMS
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[12c]"></a>GPS_Init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, bsp.o(i.GPS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPS_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[160]"></a>GPS_Run</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gps.o(i.GPS_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPS_Run &rArr; GPS_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>GPS_doinit</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, gps.o(i.GPS_doinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPS_doinit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[161]"></a>GPS_init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gps.o(i.GPS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPS_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_ON
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Run
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>GPS_parse</STRONG> (Thumb, 1794 bytes, Stack size 88 bytes, gps.o(i.GPS_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = GPS_parse &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INFO_update
</UL>

<P><STRONG><a name="[30c]"></a>GPS_usart</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, gps.o(i.GPS_usart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPS_usart
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32l0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_Calibration_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[173]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[174]"></a>HAL_ADC_Init</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcInit
</UL>

<P><STRONG><a name="[175]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[176]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[177]"></a>HAL_ADC_Start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[13f]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_DisableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_DisableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[140]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_DisableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[30e]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DMA_TX_IRQHandler
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_DMA_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[178]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[17a]"></a>HAL_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_Delay &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
</UL>

<P><STRONG><a name="[14a]"></a>HAL_FLASHEx_DATAEEPROM_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
</UL>

<P><STRONG><a name="[148]"></a>HAL_FLASHEx_DATAEEPROM_Program</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
</UL>

<P><STRONG><a name="[147]"></a>HAL_FLASHEx_DATAEEPROM_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
</UL>

<P><STRONG><a name="[155]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
</UL>

<P><STRONG><a name="[156]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program_on_addr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
</UL>

<P><STRONG><a name="[158]"></a>HAL_FLASH_Program</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program_on_addr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
</UL>

<P><STRONG><a name="[154]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program_on_addr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
</UL>

<P><STRONG><a name="[17c]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>HAL_GPIO_Init</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler_Config
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_IoInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_doinit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GPIO_MODE_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_powerLED_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_battery_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_INT
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_INT
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
</UL>

<P><STRONG><a name="[30d]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
</UL>

<P><STRONG><a name="[129]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_ON
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Run
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_INT
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPressButtonTimesLedEvent
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerLED
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_battery_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[113]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[17d]"></a>HAL_IWDG_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l0xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[17e]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[180]"></a>HAL_MspInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[14f]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler_Config
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[14e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler_Config
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[183]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[182]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[181]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[224]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterSleepMode
</UL>

<P><STRONG><a name="[226]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[185]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[189]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[18a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[188]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[186]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[187]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[16b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1116 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_EnableBypassShadow
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[18c]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[18e]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[18f]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[191]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[192]"></a>HAL_RTC_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[193]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[195]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[197]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[199]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[198]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[19a]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[19b]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
</UL>

<P><STRONG><a name="[16d]"></a>HAL_TIMEx_RemapConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l0xx_hal_tim_ex.o(i.HAL_TIMEx_RemapConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
</UL>

<P><STRONG><a name="[19e]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, iwdg.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
</UL>

<P><STRONG><a name="[171]"></a>HAL_TIM_IC_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
</UL>

<P><STRONG><a name="[16c]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_IC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_TIM_IC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_DeInit
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[16f]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
</UL>

<P><STRONG><a name="[170]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IC_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ReadCapturedValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[30f]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_StopModeWakeUpSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; usart1_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_UART_MspInit</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, vcom.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_MspInit &rArr; usart1_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_IoInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1be]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vcom.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_setting
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vcom.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[1c1]"></a>HW_AdcInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.HW_AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_AdcInit &rArr; HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[12e]"></a>HW_AdcReadChannel</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32l0xx_hw.o(i.HW_AdcReadChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[1c3]"></a>HW_GPIO_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hw_gpio.o(i.HW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
</UL>

<P><STRONG><a name="[14c]"></a>HW_GPIO_IrqHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_gpio.o(i.HW_GPIO_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_GetBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>HW_GPIO_SetIrq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hw_gpio.o(i.HW_GPIO_SetIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_GetIRQn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_GetBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[1c7]"></a>HW_GPIO_Write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_gpio.o(i.HW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
</UL>

<P><STRONG><a name="[b]"></a>HW_GetBatteryLevel</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l0xx_hw.o(i.HW_GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HW_GetBatteryLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HW_GetRandomSeed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hw.o(i.HW_GetRandomSeed))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HW_GetTemperatureLevel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l0xx_hw.o(i.HW_GetTemperatureLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HW_GetTemperatureLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HW_GetUniqueId</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l0xx_hw.o(i.HW_GetUniqueId))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1c8]"></a>HW_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = HW_Init &rArr; Read_Config &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_powerLED_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>HW_RTC_DelayMs</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[2aa]"></a>HW_RTC_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[2a9]"></a>HW_RTC_GetTimerContext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetTimerContext))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[1d0]"></a>HW_RTC_GetTimerElapsedTime</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_RTC_GetTimerElapsedTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[1ce]"></a>HW_RTC_GetTimerValue</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_md_set
</UL>

<P><STRONG><a name="[1ca]"></a>HW_RTC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[1d3]"></a>HW_RTC_IrqHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1d5]"></a>HW_RTC_SetAlarm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_GetMode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[1d2]"></a>HW_RTC_SetTimerContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[1da]"></a>HW_RTC_StopAlarm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_StopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_StopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[1db]"></a>HW_RTC_Tick2ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Tick2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_Tick2ms &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[1dd]"></a>HW_RTC_ms2Tick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[1de]"></a>HW_SPI_InOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hw_spi.o(i.HW_SPI_InOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[1c9]"></a>HW_SPI_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, hw_spi.o(i.HW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_SPI_Init &rArr; HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[1e0]"></a>HW_SPI_IoDeInit</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, hw_spi.o(i.HW_SPI_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_SPI_IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[1df]"></a>HW_SPI_IoInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hw_spi.o(i.HW_SPI_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
</UL>

<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e1]"></a>IIC_Ack</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Ack &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[1e3]"></a>IIC_Delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, iic.o(i.IIC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[1e4]"></a>IIC_GPIO_MODE_Config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iic.o(i.IIC_GPIO_MODE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_GPIO_MODE_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e5]"></a>IIC_NAck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[1e6]"></a>IIC_ReadByte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, iic.o(i.IIC_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_ReadByte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[1e9]"></a>IIC_SendByte</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, iic.o(i.IIC_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_SendByte &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[1ea]"></a>IIC_Start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Start &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[1eb]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, iic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
</UL>

<P><STRONG><a name="[1ec]"></a>IIC_WaitAck</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, iic.o(i.IIC_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[1ed]"></a>IWDG_Refresh</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iwdg.o(i.IWDG_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[2e7]"></a>LOG_GPS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.LOG_GPS))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_loggps_set
</UL>

<P><STRONG><a name="[2ea]"></a>LORA_GPS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.LORA_GPS))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sgm_set
</UL>

<P><STRONG><a name="[2e9]"></a>LORA_GPS_MPU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.LORA_GPS_MPU))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sgm_set
</UL>

<P><STRONG><a name="[1f7]"></a>LORA_Init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, lora.o(i.LORA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = LORA_Init &rArr; fdr_config &rArr; Read_Config &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program_on_addr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_printf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdr_config
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_printf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>LORA_Join</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, lora.o(i.LORA_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = LORA_Join &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Join
</UL>

<P><STRONG><a name="[201]"></a>LORA_JoinStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lora.o(i.LORA_JoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LORA_JoinStatus &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionAU915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[1f3]"></a>LORA_RequestClass</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lora.o(i.LORA_RequestClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = LORA_RequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>

<P><STRONG><a name="[1ef]"></a>LORA_send</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lora.o(i.LORA_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_running
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_ConfirmClass
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
</UL>

<P><STRONG><a name="[20d]"></a>LPF2pApply_1</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, filter.o(i.LPF2pApply_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LPF2pApply_1 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
</UL>

<P><STRONG><a name="[210]"></a>LPF2pApply_2</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, filter.o(i.LPF2pApply_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LPF2pApply_2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
</UL>

<P><STRONG><a name="[211]"></a>LPF2pApply_3</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, filter.o(i.LPF2pApply_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LPF2pApply_3 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
</UL>

<P><STRONG><a name="[212]"></a>LPF2pApply_4</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, filter.o(i.LPF2pApply_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LPF2pApply_4 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyro
</UL>

<P><STRONG><a name="[213]"></a>LPF2pApply_5</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, filter.o(i.LPF2pApply_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LPF2pApply_5 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyro
</UL>

<P><STRONG><a name="[214]"></a>LPF2pApply_6</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, filter.o(i.LPF2pApply_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LPF2pApply_6 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyro
</UL>

<P><STRONG><a name="[215]"></a>LPF2pSetCutoffFreq_1</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, filter.o(i.LPF2pSetCutoffFreq_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LPF2pSetCutoffFreq_1 &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[218]"></a>LPF2pSetCutoffFreq_2</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, filter.o(i.LPF2pSetCutoffFreq_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LPF2pSetCutoffFreq_2 &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[219]"></a>LPF2pSetCutoffFreq_3</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, filter.o(i.LPF2pSetCutoffFreq_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LPF2pSetCutoffFreq_3 &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[21a]"></a>LPF2pSetCutoffFreq_4</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, filter.o(i.LPF2pSetCutoffFreq_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LPF2pSetCutoffFreq_4 &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[21b]"></a>LPF2pSetCutoffFreq_5</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, filter.o(i.LPF2pSetCutoffFreq_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LPF2pSetCutoffFreq_5 &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[21c]"></a>LPF2pSetCutoffFreq_6</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, filter.o(i.LPF2pSetCutoffFreq_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LPF2pSetCutoffFreq_6 &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[21d]"></a>LPM_EnterLowPower</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; HW_SPI_IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterSleepMode
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitSleepMode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitOffMode
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterOffMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[222]"></a>LPM_EnterOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_EnterOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[21e]"></a>LPM_EnterSleepMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.LPM_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_EnterSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[220]"></a>LPM_EnterStopMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.LPM_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPM_EnterStopMode &rArr; HW_SPI_IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_doinit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_getState
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[223]"></a>LPM_ExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_ExitOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[21f]"></a>LPM_ExitSleepMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_ExitSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[221]"></a>LPM_ExitStopMode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.LPM_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPM_ExitStopMode &rArr; HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[1d6]"></a>LPM_GetMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[2f5]"></a>LPM_SetOffMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_SetOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_SetOffMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[1d4]"></a>LPM_SetStopMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_SetStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_TxCpltCallback
</UL>

<P><STRONG><a name="[227]"></a>LoRaMacComputeMic</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LoRaMacComputeMic &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1fa]"></a>LoRaMacInitialization</STRONG> (Thumb, 518 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LoRaMacInitialization &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
</UL>

<P><STRONG><a name="[22f]"></a>LoRaMacJoinComputeMic</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LoRaMacJoinComputeMic &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[230]"></a>LoRaMacJoinComputeSKeys</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, loramaccrypto.o(i.LoRaMacJoinComputeSKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LoRaMacJoinComputeSKeys &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[231]"></a>LoRaMacJoinDecrypt</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoRaMacJoinDecrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[20c]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_tx
</UL>

<P><STRONG><a name="[202]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionAU915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_JoinStatus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_get
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_get
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_get
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_get
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1fb]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, loramac.o(i.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_set
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_set
</UL>

<P><STRONG><a name="[200]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, loramac.o(i.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
</UL>

<P><STRONG><a name="[23b]"></a>LoRaMacPayloadDecrypt</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, loramaccrypto.o(i.LoRaMacPayloadDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoRaMacPayloadDecrypt &rArr; LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[23c]"></a>LoRaMacPayloadEncrypt</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacPayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[20b]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, loramac.o(i.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LoRaMacQueryTxPossible &rArr; RegionAdrNext &rArr; RegionAU915AdrNext &rArr; RegionAU915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_tx
</UL>

<P><STRONG><a name="[23f]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionAU915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_set
</UL>

<P><STRONG><a name="[240]"></a>MPU9250_INT</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lora.o(i.MPU9250_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = MPU9250_INT &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_moin
</UL>

<P><STRONG><a name="[241]"></a>MPU_Get_Accel</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, mpu9250.o(i.MPU_Get_Accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MPU_Get_Accel &rArr; MPU_Get_Accelerometer &rArr; MPU_Read_Len &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[242]"></a>MPU_Get_Accelerometer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mpu9250.o(i.MPU_Get_Accelerometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MPU_Get_Accelerometer &rArr; MPU_Read_Len &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
</UL>

<P><STRONG><a name="[245]"></a>MPU_Get_Gyro</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, mpu9250.o(i.MPU_Get_Gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU_Get_Gyro &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_5
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate1
</UL>

<P><STRONG><a name="[246]"></a>MPU_Get_Gyroscope</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mpu9250.o(i.MPU_Get_Gyroscope))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyro
</UL>

<P><STRONG><a name="[247]"></a>MPU_INT_Init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, mpu9250.o(i.MPU_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = MPU_INT_Init &rArr; Read_Config &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[249]"></a>MPU_Init</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, mpu9250.o(i.MPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MPU_Init &rArr; LPF2pSetCutoffFreq_6 &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[24d]"></a>MPU_Read_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mpu9250.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_Read_Byte &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[244]"></a>MPU_Read_Len</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mpu9250.o(i.MPU_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Read_Len &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
</UL>

<P><STRONG><a name="[24b]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpu9250.o(i.MPU_Set_Accel_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Set_Accel_Fsr &rArr; MPU_Write_Byte &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[24a]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu9250.o(i.MPU_Set_Gyro_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Set_Gyro_Fsr &rArr; MPU_Write_Byte &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[24e]"></a>MPU_Set_LPF</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mpu9250.o(i.MPU_Set_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[24c]"></a>MPU_Set_Rate</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mpu9250.o(i.MPU_Set_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MPU_Set_Rate &rArr; MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[248]"></a>MPU_Write_Byte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mpu9250.o(i.MPU_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_Write_Byte &rArr; IIC_WaitAck &rArr; IIC_Stop &rArr; SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate1
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_INT_Init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[1c6]"></a>MSP_GetIRQn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.MSP_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>

<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OnPressButtonTimeoutEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.OnPressButtonTimeoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OnPressButtonTimeoutEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.user_key_event)
</UL>
<P><STRONG><a name="[59]"></a>OnPressButtonTimesLedEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.OnPressButtonTimesLedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OnPressButtonTimesLedEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.user_key_event)
</UL>
<P><STRONG><a name="[308]"></a>PMTK353</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gps.o(i.PMTK353))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_setting
</UL>

<P><STRONG><a name="[309]"></a>PMTK886</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gps.o(i.PMTK886))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_setting
</UL>

<P><STRONG><a name="[259]"></a>POWER_ON</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gps.o(i.POWER_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = POWER_ON &rArr; send_setting &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_setting
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[258]"></a>PrepareFrame</STRONG> (Thumb, 620 bytes, Stack size 48 bytes, loramac.o(i.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PrepareFrame &rArr; LoRaMacJoinComputeMic &rArr; AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacCommandsToRepeat
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[34]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RNG_LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RNG_LPUART1_IRQHandler &rArr; vcom_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[196]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[194]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RTC_IRQHandler &rArr; HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1cc]"></a>Read_Config</STRONG> (Thumb, 706 bytes, Stack size 224 bytes, lora.o(i.Read_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = Read_Config &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_INT_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdr_config
</UL>

<P><STRONG><a name="[264]"></a>RegionAU915AdrNext</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, regionau915.o(i.RegionAU915AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RegionAU915AdrNext &rArr; RegionAU915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[266]"></a>RegionAU915AlternateDr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, regionau915.o(i.RegionAU915AlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionAU915AlternateDr &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[267]"></a>RegionAU915ApplyCFList</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, regionau915.o(i.RegionAU915ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionAU915ApplyCFList &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[284]"></a>RegionAU915ApplyDrOffset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[269]"></a>RegionAU915CalcBackOff</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, regionau915.o(i.RegionAU915CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionAU915CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[26b]"></a>RegionAU915ChanMaskSet</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionAU915ChanMaskSet &rArr; RegionCommonCountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[26d]"></a>RegionAU915ComputeRxWindowParameters</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, regionau915.o(i.RegionAU915ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RegionAU915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[289]"></a>RegionAU915DlChannelReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[265]"></a>RegionAU915GetPhyParam</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, regionau915.o(i.RegionAU915GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RegionAU915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915AdrNext
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[272]"></a>RegionAU915InitDefaults</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, regionau915.o(i.RegionAU915InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionAU915InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_set8channel_get
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_freq1_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[275]"></a>RegionAU915LinkAdrReq</STRONG> (Thumb, 540 bytes, Stack size 120 bytes, regionau915.o(i.RegionAU915LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = RegionAU915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[28a]"></a>RegionAU915NewChannelReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[278]"></a>RegionAU915NextChannel</STRONG> (Thumb, 266 bytes, Stack size 128 bytes, regionau915.o(i.RegionAU915NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RegionAU915NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeNext125kHzJoinChannel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[27b]"></a>RegionAU915RxConfig</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, regionau915.o(i.RegionAU915RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[27c]"></a>RegionAU915RxParamSetupReq</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionAU915RxParamSetupReq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[27d]"></a>RegionAU915SetBandTxDone</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, regionau915.o(i.RegionAU915SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionAU915SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[27f]"></a>RegionAU915SetContinuousWave</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionAU915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[281]"></a>RegionAU915TxConfig</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, regionau915.o(i.RegionAU915TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[28e]"></a>RegionAU915TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[282]"></a>RegionAU915Verify</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, regionau915.o(i.RegionAU915Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionAU915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[23d]"></a>RegionAdrNext</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, region.o(i.RegionAdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RegionAdrNext &rArr; RegionAU915AdrNext &rArr; RegionAU915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915AdrNext
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[238]"></a>RegionAlternateDr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionAlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionAlternateDr &rArr; RegionAU915AlternateDr &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[255]"></a>RegionApplyCFList</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RegionApplyCFList &rArr; RegionAU915ApplyCFList &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[283]"></a>RegionApplyDrOffset</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionApplyDrOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[137]"></a>RegionCalcBackOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionCalcBackOff &rArr; RegionAU915CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915CalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[237]"></a>RegionChanMaskSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionChanMaskSet &rArr; RegionAU915ChanMaskSet &rArr; RegionCommonCountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[26a]"></a>RegionCommonCalcBackOff</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, regioncommon.o(i.RegionCommonCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetJoinDc
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915CalcBackOff
</UL>

<P><STRONG><a name="[27a]"></a>RegionCommonChanDisable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
</UL>

<P><STRONG><a name="[268]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, regioncommon.o(i.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915InitDefaults
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ChanMaskSet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ApplyCFList
</UL>

<P><STRONG><a name="[286]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 96 bytes, Stack size 36 bytes, regioncommon.o(i.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>

<P><STRONG><a name="[270]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, regioncommon.o(i.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[26f]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[280]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetContinuousWave
</UL>

<P><STRONG><a name="[26c]"></a>RegionCommonCountChannels</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, regioncommon.o(i.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ChanMaskSet
</UL>

<P><STRONG><a name="[285]"></a>RegionCommonGetJoinDc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonGetJoinDc))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>

<P><STRONG><a name="[277]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, regioncommon.o(i.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
</UL>

<P><STRONG><a name="[276]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonParseLinkAdrReq))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
</UL>

<P><STRONG><a name="[27e]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonSetBandTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetBandTxDone
</UL>

<P><STRONG><a name="[279]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
</UL>

<P><STRONG><a name="[13d]"></a>RegionCommonValueInRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915Verify
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxParamSetupReq
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>

<P><STRONG><a name="[234]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionAU915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[261]"></a>RegionDlChannelReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionDlChannelReq
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[22a]"></a>RegionGetPhyParam</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, region.o(i.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegionGetPhyParam &rArr; RegionAU915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[22b]"></a>RegionInitDefaults</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RegionInitDefaults &rArr; RegionAU915InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[229]"></a>RegionIsActive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, region.o(i.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[25d]"></a>RegionLinkAdrReq</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, region.o(i.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RegionLinkAdrReq &rArr; RegionAU915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[25f]"></a>RegionNewChannelReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionNewChannelReq
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[28b]"></a>RegionNextChannel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, region.o(i.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RegionNextChannel &rArr; RegionAU915NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[235]"></a>RegionRxConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(i.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[25e]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionAU915RxParamSetupReq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[257]"></a>RegionSetBandTxDone</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionSetBandTxDone &rArr; RegionAU915SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[28c]"></a>RegionSetContinuousWave</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(i.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionSetContinuousWave &rArr; RegionAU915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
</UL>

<P><STRONG><a name="[28d]"></a>RegionTxConfig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[260]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(i.RegionTxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionTxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[232]"></a>RegionVerify</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(i.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionVerify &rArr; RegionAU915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[28f]"></a>RxChainCalibration</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sx1276.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[1e7]"></a>SDA_IN</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iic.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_IN &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[1e2]"></a>SDA_OUT</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iic.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[294]"></a>SX1276BoardInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276BoardInit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
</UL>

<P><STRONG><a name="[64]"></a>SX1276CheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1las.o(i.SX1276CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[298]"></a>SX1276GetPaSelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276mb1las.o(i.SX1276GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>

<P><STRONG><a name="[73]"></a>SX1276GetRadioWakeUpTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(i.SX1276GetRadioWakeUpTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276GetRadioWakeUpTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>SX1276GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetStatus))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 444 bytes, Stack size 72 bytes, sx1276.o(i.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276GetTimeOnAir &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[6]"></a>SX1276GetWakeTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1las.o(i.SX1276GetWakeTime))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>SX1276Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>SX1276IoDeInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, sx1276mb1las.o(i.SX1276IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>SX1276IoInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, sx1276mb1las.o(i.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276BoardInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[7]"></a>SX1276IoIrqInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276mb1las.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276IoIrqInit &rArr; HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>SX1276IsChannelFree</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, sx1276.o(i.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[0]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 684 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = SX1276OnDio0Irq &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SX1276OnDio1Irq &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276OnDio2Irq &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sx1276.o(i.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(i.SX1276Init)
</UL>
<P><STRONG><a name="[61]"></a>SX1276Random</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>SX1276Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>SX1276ReadBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[295]"></a>SX1276ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[6c]"></a>SX1276ReadRssi</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sx1276.o(i.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[292]"></a>SX1276Reset</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, sx1276.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SX1276Reset &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[66]"></a>SX1276Send</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[a]"></a>SX1276SetAntSw</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1276mb1las.o(i.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276SetAntSw &rArr; HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, sx1276mb1las.o(i.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276SetAntSwLowPower &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>SX1276SetChannel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>SX1276SetModem</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[293]"></a>SX1276SetOpMode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[72]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[8]"></a>SX1276SetRfTxPower</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sx1276mb1las.o(i.SX1276SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetRfTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>SX1276SetRx</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, sx1276.o(i.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276SetRx &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>SX1276SetRxConfig</STRONG> (Thumb, 628 bytes, Stack size 64 bytes, sx1276.o(i.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>SX1276SetSleep</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>SX1276SetStby</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276SetStby &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[297]"></a>SX1276SetTx</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276SetTx &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[63]"></a>SX1276SetTxConfig</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, sx1276.o(i.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, sx1276.o(i.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[5]"></a>SX1276SetXO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276mb1las.o(i.SX1276SetXO))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>SX1276StartCad</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>SX1276Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>SX1276WriteBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.constdata)
</UL>
<P><STRONG><a name="[296]"></a>SX1276WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[233]"></a>Send</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, loramac.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[29a]"></a>SendFrameOnChannel</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, loramac.o(i.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[239]"></a>SetTxContinuousWave</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, loramac.o(i.SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SetTxContinuousWave &rArr; RegionSetContinuousWave &rArr; RegionAU915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[23a]"></a>SetTxContinuousWave1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, loramac.o(i.SetTxContinuousWave1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetTxContinuousWave1 &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[205]"></a>Store_Config</STRONG> (Thumb, 722 bytes, Stack size 32 bytes, lora.o(i.Store_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Store_Config &rArr; FLASH_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_Identify
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdr_config
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
</UL>

<P><STRONG><a name="[2a2]"></a>Store_key</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lora.o(i.Store_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = Store_key &rArr; FLASH_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
</UL>

<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2a5]"></a>SystemClock_Config</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, stm32l0xx_hw.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>TIM21_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.TIM21_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIM21_IRQHandler &rArr; TIMER_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2a6]"></a>TIMER_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, iwdg.o(i.TIMER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIMER_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM21_IRQHandler
</UL>

<P><STRONG><a name="[22d]"></a>TimerGetCurrentTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timeserver.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TimerGetCurrentTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxConfig
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[136]"></a>TimerGetElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timeserver.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[1f4]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timeserver.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[18d]"></a>TimerIrqHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, timeserver.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[1f5]"></a>TimerSetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnIWDGRefreshTimeoutEvent
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[209]"></a>TimerStart</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, timeserver.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnIWDGRefreshTimeoutEvent
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_tx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[1f2]"></a>TimerStop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timeserver.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPressButtonTimesLedEvent
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPressButtonTimeoutEvent
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
</UL>

<P><STRONG><a name="[1cb]"></a>TraceInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, trace.o(i.TraceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TraceInit &rArr; vcom_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; usart1_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[149]"></a>TraceSend</STRONG> (Thumb, 126 bytes, Stack size 304 bytes, trace.o(i.TraceSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Sense
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program_on_addr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INPUT
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_joinmessage
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_INT
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_INT
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_ConfirmClass
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_printf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_printf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_all_config
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_devaddr_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_md_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hardware_ic_get
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TDC_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ReceiveBinary
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Receive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RPL_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RJTDC_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PDOP_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_get
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NMEA886_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NMEA353_get
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_MOD_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_KAT_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_FDR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DwellTime_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DutyCycle_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DEBUG_run
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHE_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHE_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_BAT_get
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ACE_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTxNextPacketTimerEvent
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1b7]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b9]"></a>UART_CheckIdleState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b8]"></a>UART_SetConfig</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1ac]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART1_IRQHandler &rArr; usart1_IRQHandler &rArr; GPS_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2b4]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32a]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[32b]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[32c]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2ad]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>

<P><STRONG><a name="[109]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1dc]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hw_rtc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[125]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1276.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strtod
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacCommandsToRepeat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
</UL>

<P><STRONG><a name="[2c7]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[30a]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[32d]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[2b6]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2b7]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2b8]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[2b9]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2ba]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2bb]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[2bc]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[2bd]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
</UL>

<P><STRONG><a name="[2be]"></a>__mathlib_rredf2</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[32e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[32f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[330]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2c6]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[116]"></a>aes_encrypt</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[11a]"></a>aes_set_key</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[122]"></a>asin</STRONG> (Thumb, 574 bytes, Stack size 80 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
</UL>

<P><STRONG><a name="[b7]"></a>at_ACE_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_ACE_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_ACE_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>at_ACE_set</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at.o(i.at_ACE_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_ACE_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>at_ADR_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at.o(i.at_ADR_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_ADR_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>at_ADR_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at.o(i.at_ADR_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = at_ADR_set &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>at_AppEUI_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_AppEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = at_AppEUI_get &rArr; print_8_02x &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appeui_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>at_AppEUI_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_AppEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = at_AppEUI_set &rArr; sscanf_8_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_8_hhx
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appeui_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>at_AppKey_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_AppKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = at_AppKey_get &rArr; print_16_02x &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appkey_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>at_AppKey_set</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, at.o(i.at_AppKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = at_AppKey_set &rArr; sscanf_16_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appkey_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>at_AppSKey_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_AppSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = at_AppSKey_get &rArr; print_16_02x &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appskey_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>at_AppSKey_set</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, at.o(i.at_AppSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = at_AppSKey_set &rArr; sscanf_16_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appskey_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>at_BAT_get</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, at.o(i.at_BAT_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = at_BAT_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>at_CAL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_CAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = at_CAL &rArr; calibrate2 &rArr; FLASH_program_on_addr &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate2
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>at_CFG_run</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, at.o(i.at_CFG_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = at_CFG_run &rArr; printf_all_config &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_all_config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>at_CHE_get</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, at.o(i.at_CHE_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = at_CHE_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_set8channel_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>at_CHE_set</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at.o(i.at_CHE_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_CHE_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_set8channel_set
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>at_CHS_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_CHS_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_CHS_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_freq1_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>at_CHS_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at.o(i.at_CHS_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_CHS_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_freq1_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>at_DEBUG_run</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, at.o(i.at_DEBUG_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_DEBUG_run &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>at_DataRate_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_DataRate_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>at_DataRate_set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, at.o(i.at_DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_DataRate_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_tx_datarate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>at_DevAddr_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at.o(i.at_DevAddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_DevAddr_get &rArr; lora_config_devaddr_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_devaddr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>at_DevAddr_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_DevAddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = at_DevAddr_set &rArr; sscanf_uint32_as_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_devaddr_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>at_DevEUI_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_DevEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = at_DevEUI_get &rArr; print_8_02x &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_deveui_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>at_DevEUI_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_DevEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = at_DevEUI_set &rArr; sscanf_8_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_8_hhx
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_deveui_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>at_DeviceClass_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at.o(i.at_DeviceClass_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_DeviceClass_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>at_DeviceClass_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, at.o(i.at_DeviceClass_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = at_DeviceClass_set &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>at_DownlinkCounter_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_DownlinkCounter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_DownlinkCounter_get &rArr; print_u &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>at_DownlinkCounter_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_DownlinkCounter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_DownlinkCounter_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>at_DutyCycle_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at.o(i.at_DutyCycle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = at_DutyCycle_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>at_DutyCycle_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_DutyCycle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_DutyCycle_set &rArr; lora_config_duty_cycle_set &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionAU915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>at_DwellTime_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_DwellTime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_DwellTime_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>at_DwellTime_set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at.o(i.at_DwellTime_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_DwellTime_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>at_FDR</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at.o(i.at_FDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = at_FDR &rArr; FLASH_erase &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>at_Join</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at.o(i.at_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = at_Join &rArr; LORA_Join &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>at_JoinAcceptDelay1_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_JoinAcceptDelay1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_JoinAcceptDelay1_get &rArr; print_u &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>at_JoinAcceptDelay1_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at.o(i.at_JoinAcceptDelay1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_JoinAcceptDelay1_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>at_JoinAcceptDelay2_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_JoinAcceptDelay2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_JoinAcceptDelay2_get &rArr; print_u &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>at_JoinAcceptDelay2_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at.o(i.at_JoinAcceptDelay2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_JoinAcceptDelay2_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>at_KAT_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_KAT_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_KAT_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>at_KAT_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at.o(i.at_KAT_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_KAT_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>at_MOD_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_MOD_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_MOD_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>at_MOD_set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, at.o(i.at_MOD_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_MOD_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>at_NMEA353_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at.o(i.at_NMEA353_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = at_NMEA353_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>at_NMEA353_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at.o(i.at_NMEA353_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_NMEA353_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>at_NMEA886_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at.o(i.at_NMEA886_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = at_NMEA886_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>at_NMEA886_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_NMEA886_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_NMEA886_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>at_NetworkID_get</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, at.o(i.at_NetworkID_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = at_NetworkID_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>at_NetworkID_set</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, at.o(i.at_NetworkID_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = at_NetworkID_set &rArr; sscanf_uint32_as_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>at_NetworkJoinMode_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at.o(i.at_NetworkJoinMode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_NetworkJoinMode_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_get
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>at_NetworkJoinMode_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at.o(i.at_NetworkJoinMode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = at_NetworkJoinMode_set &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>at_NetworkJoinStatus</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at.o(i.at_NetworkJoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_NetworkJoinStatus &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>at_NwkSKey_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_NwkSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = at_NwkSKey_get &rArr; print_16_02x &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_nwkskey_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>at_NwkSKey_set</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, at.o(i.at_NwkSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = at_NwkSKey_set &rArr; sscanf_16_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_nwkskey_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>at_PDOP_get</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at.o(i.at_PDOP_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = at_PDOP_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>at_PDOP_set</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, at.o(i.at_PDOP_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = at_PDOP_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>at_PublicNetwork_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at.o(i.at_PublicNetwork_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_PublicNetwork_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>at_PublicNetwork_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at.o(i.at_PublicNetwork_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = at_PublicNetwork_set &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>at_RJTDC_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_RJTDC_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_RJTDC_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>at_RJTDC_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, at.o(i.at_RJTDC_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_RJTDC_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>at_RPL_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_RPL_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_RPL_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>at_RPL_set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at.o(i.at_RPL_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_RPL_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>at_Receive</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at.o(i.at_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = at_Receive &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>at_ReceiveBinary</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, at.o(i.at_ReceiveBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_ReceiveBinary &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>at_Rx1Delay_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_Rx1Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_Rx1Delay_get &rArr; print_u &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>at_Rx1Delay_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_Rx1Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_Rx1Delay_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>at_Rx2DataRate_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at.o(i.at_Rx2DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_Rx2DataRate_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>at_Rx2DataRate_set</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, at.o(i.at_Rx2DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = at_Rx2DataRate_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>at_Rx2Delay_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_Rx2Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_Rx2Delay_get &rArr; print_u &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>at_Rx2Delay_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_Rx2Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_Rx2Delay_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>at_Rx2Frequency_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_Rx2Frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_Rx2Frequency_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>at_Rx2Frequency_set</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, at.o(i.at_Rx2Frequency_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = at_Rx2Frequency_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>at_Send</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, at.o(i.at_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = at_Send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>at_SendBinary</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, at.o(i.at_SendBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = at_SendBinary &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>at_TDC_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_TDC_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_TDC_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>at_TDC_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at.o(i.at_TDC_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_TDC_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>at_TransmitPower_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_TransmitPower_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_TransmitPower_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>at_TransmitPower_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at.o(i.at_TransmitPower_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_TransmitPower_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>at_UplinkCounter_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(i.at_UplinkCounter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_UplinkCounter_get &rArr; print_u &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>at_UplinkCounter_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(i.at_UplinkCounter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_UplinkCounter_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_status
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>at_ack_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at.o(i.at_ack_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_ack_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>at_ack_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(i.at_ack_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_ack_set
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>at_application_port_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_application_port_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_application_port_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_application_port_get
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>at_application_port_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at.o(i.at_application_port_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_application_port_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_application_port_set
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>at_ftime_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_ftime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_ftime_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>at_ftime_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at.o(i.at_ftime_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_ftime_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>at_hardware_ic_get</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, at.o(i.at_hardware_ic_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = at_hardware_ic_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>at_hardware_ic_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at.o(i.at_hardware_ic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = at_hardware_ic_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>at_isack_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at.o(i.at_isack_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_isack_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_isack_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>at_loggps_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_loggps_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_loggps_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>at_loggps_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at.o(i.at_loggps_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_loggps_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_GPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>at_lon_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_lon_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_lon_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>at_lon_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at.o(i.at_lon_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_lon_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>at_md_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at.o(i.at_md_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = at_md_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>at_md_set</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, at.o(i.at_md_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = at_md_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>at_mlon_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_mlon_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_mlon_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>at_mlon_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at.o(i.at_mlon_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_mlon_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>at_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at.o(i.at_reset))
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>at_return_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at.o(i.at_return_error))
<BR>[Address Reference Count : 2]<UL><LI> command.o(.constdata)
<LI> command.o(i.printf_all_config)
</UL>
<P><STRONG><a name="[b6]"></a>at_rssi_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_rssi_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_rssi_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_rssi_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>at_sgm_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_sgm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_sgm_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>at_sgm_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at.o(i.at_sgm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_sgm_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_GPS_MPU
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_GPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>at_snr_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_snr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_snr_get &rArr; print_u &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_snr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>at_symbtimeout1LSB_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_symbtimeout1LSB_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_symbtimeout1LSB_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>at_symbtimeout1LSB_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at.o(i.at_symbtimeout1LSB_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_symbtimeout1LSB_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>at_symbtimeout2LSB_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at.o(i.at_symbtimeout2LSB_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_symbtimeout2LSB_get &rArr; print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>at_symbtimeout2LSB_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at.o(i.at_symbtimeout2LSB_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_symbtimeout2LSB_set &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>at_version_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at.o(i.at_version_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = at_version_get &rArr; region_printf &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[2ec]"></a>atan</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[123]"></a>atan2</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
</UL>

<P><STRONG><a name="[2d5]"></a>calibrate1</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, mpu9250.o(i.calibrate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = calibrate1 &rArr; MPU_Get_Gyro &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyro
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CAL
</UL>

<P><STRONG><a name="[2d6]"></a>calibrate2</STRONG> (Thumb, 300 bytes, Stack size 96 bytes, mpu9250.o(i.calibrate2))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = calibrate2 &rArr; FLASH_program_on_addr &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program_on_addr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyro
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CAL
</UL>

<P><STRONG><a name="[287]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[24f]"></a>certif_DownLinkIncrement</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lora-test.o(i.certif_DownLinkIncrement))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[251]"></a>certif_linkCheck</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lora-test.o(i.certif_linkCheck))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[20a]"></a>certif_running</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora-test.o(i.certif_running))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[250]"></a>certif_rx</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, lora-test.o(i.certif_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = certif_rx &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[164]"></a>check</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gps.o(i.check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
</UL>

<P><STRONG><a name="[2ee]"></a>copytxdata</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, gps.o(i.copytxdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = copytxdata
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_setting
</UL>

<P><STRONG><a name="[217]"></a>cosf</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
</UL>

<P><STRONG><a name="[273]"></a>customize_freq1_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.customize_freq1_get))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915InitDefaults
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHS_get
</UL>

<P><STRONG><a name="[2d8]"></a>customize_freq1_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.customize_freq1_set))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHS_set
</UL>

<P><STRONG><a name="[274]"></a>customize_set8channel_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.customize_set8channel_get))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915InitDefaults
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHE_get
</UL>

<P><STRONG><a name="[208]"></a>customize_set8channel_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.customize_set8channel_set))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHE_set
</UL>

<P><STRONG><a name="[1fe]"></a>fdr_config</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lora.o(i.fdr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = fdr_config &rArr; Read_Config &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
</UL>

<P><STRONG><a name="[288]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[2f0]"></a>gps_Identify</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(i.gps_Identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = gps_Identify &rArr; Store_Config &rArr; FLASH_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fc]"></a>gps_state_no</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.gps_state_no))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[2fb]"></a>gps_state_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.gps_state_off))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[2f8]"></a>gps_state_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.gps_state_on))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[11f]"></a>invSqrt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = invSqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
</UL>

<P><STRONG><a name="[2f2]"></a>iwdg_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, iwdg.o(i.iwdg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = iwdg_init &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSIFrequency
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f9]"></a>key_printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lora.o(i.key_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = key_printf &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
</UL>

<P><STRONG><a name="[2cb]"></a>lora_config_appeui_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_appeui_get))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_get
</UL>

<P><STRONG><a name="[2ce]"></a>lora_config_appeui_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_appeui_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_appeui_set
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_set
</UL>

<P><STRONG><a name="[2cf]"></a>lora_config_appkey_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_appkey_get))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_get
</UL>

<P><STRONG><a name="[2d2]"></a>lora_config_appkey_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_appkey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_appkey_set
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_set
</UL>

<P><STRONG><a name="[29c]"></a>lora_config_application_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.lora_config_application_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_application_port_get
</UL>

<P><STRONG><a name="[207]"></a>lora_config_application_port_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_application_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_application_port_set
</UL>

<P><STRONG><a name="[2d3]"></a>lora_config_appskey_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_appskey_get))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_get
</UL>

<P><STRONG><a name="[2d4]"></a>lora_config_appskey_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_appskey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_appskey_set
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_set
</UL>

<P><STRONG><a name="[2da]"></a>lora_config_devaddr_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora.o(i.lora_config_devaddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lora_config_devaddr_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_get
</UL>

<P><STRONG><a name="[2dc]"></a>lora_config_devaddr_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_devaddr_set))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_set
</UL>

<P><STRONG><a name="[2dd]"></a>lora_config_deveui_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_deveui_get))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_get
</UL>

<P><STRONG><a name="[2de]"></a>lora_config_deveui_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_deveui_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_deveui_set
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_set
</UL>

<P><STRONG><a name="[2e0]"></a>lora_config_duty_cycle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_duty_cycle_get))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DutyCycle_get
</UL>

<P><STRONG><a name="[2e1]"></a>lora_config_duty_cycle_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lora.o(i.lora_config_duty_cycle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lora_config_duty_cycle_set &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionAU915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DutyCycle_set
</UL>

<P><STRONG><a name="[2e6]"></a>lora_config_isack_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lora.o(i.lora_config_isack_get))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_isack_get
</UL>

<P><STRONG><a name="[2e3]"></a>lora_config_nwkskey_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora.o(i.lora_config_nwkskey_get))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_get
</UL>

<P><STRONG><a name="[2e4]"></a>lora_config_nwkskey_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.lora_config_nwkskey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_config_nwkskey_set
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_set
</UL>

<P><STRONG><a name="[1f0]"></a>lora_config_otaa_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_otaa_get))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_get
</UL>

<P><STRONG><a name="[206]"></a>lora_config_otaa_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_otaa_set))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_set
</UL>

<P><STRONG><a name="[2a0]"></a>lora_config_reqack_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_reqack_get))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
</UL>

<P><STRONG><a name="[204]"></a>lora_config_reqack_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_reqack_set))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_set
</UL>

<P><STRONG><a name="[2e8]"></a>lora_config_rssi_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.lora_config_rssi_get))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rssi_get
</UL>

<P><STRONG><a name="[2eb]"></a>lora_config_snr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.lora_config_snr_get))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_snr_get
</UL>

<P><STRONG><a name="[2d9]"></a>lora_config_tx_datarate_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_config_tx_datarate_set))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_set
</UL>

<P><STRONG><a name="[29f]"></a>lora_getGPSState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_getGPSState))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[225]"></a>lora_getState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora.o(i.lora_getState))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[1f6]"></a>lora_state_GPS_Send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.lora_state_GPS_Send))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>

<P><STRONG><a name="[2fd]"></a>lora_state_INT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lora.o(i.lora_state_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lora_state_INT &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_exti
</UL>

<P><STRONG><a name="[2f4]"></a>lora_state_Led</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(i.lora_state_Led))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = main &rArr; user_key_event &rArr; send_data &rArr; Send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler_Config
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_INT_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Run
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GPIO_MODE_Config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_GPS_Send
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetOffMode
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_moin
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_exti
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_Identify
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerLED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[117]"></a>memcpy1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utilities.o(i.memcpy1))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_at_receive
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_nwkskey_set
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_deveui_set
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appskey_set
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appkey_set
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appeui_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[25c]"></a>memcpyr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, utilities.o(i.memcpyr))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[115]"></a>memset1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utilities.o(i.memset1))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[168]"></a>my_atof</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gps.o(i.my_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = my_atof &rArr; my_strtod &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
</UL>

<P><STRONG><a name="[169]"></a>my_atoi</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gps.o(i.my_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
</UL>

<P><STRONG><a name="[305]"></a>my_strtod</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, gps.o(i.my_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = my_strtod &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
</UL>

<P><STRONG><a name="[2ff]"></a>new_firmware_update</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lora.o(i.new_firmware_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = new_firmware_update &rArr; EEPROM_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_touint
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fe]"></a>powerLED</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp.o(i.powerLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = powerLED &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_powerLED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d7]"></a>printf_all_config</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, command.o(i.printf_all_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = printf_all_config &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
</UL>

<P><STRONG><a name="[1f1]"></a>printf_joinmessage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, loramac.o(i.printf_joinmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = printf_joinmessage &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>

<P><STRONG><a name="[307]"></a>rand1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utilities.o(i.rand1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rand1 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[13b]"></a>randr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, utilities.o(i.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeNext125kHzJoinChannel
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
</UL>

<P><STRONG><a name="[263]"></a>read_data</STRONG> (Thumb, 126 bytes, Stack size 28 bytes, lora.o(i.read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
</UL>

<P><STRONG><a name="[1f8]"></a>region_printf</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora.o(i.region_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = region_printf &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version_get
</UL>

<P><STRONG><a name="[290]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[2fa]"></a>send_ALARM_data</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, main.o(i.send_ALARM_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = send_ALARM_data &rArr; Send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_Led
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetOffMode
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[2f9]"></a>send_data</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, main.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = send_data &rArr; Send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_INT_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_Led
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetOffMode
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[301]"></a>send_exti</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.send_exti))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = send_exti &rArr; lora_state_INT &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[302]"></a>send_moin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.send_moin))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = send_moin &rArr; MPU9250_INT &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25a]"></a>send_setting</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, gps.o(i.send_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = send_setting &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copytxdata
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMTK886
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMTK353
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_ON
</UL>

<P><STRONG><a name="[203]"></a>set_at_receive</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at.o(i.set_at_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_at_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[163]"></a>split</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, gps.o(i.split))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = split
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_parse
</UL>

<P><STRONG><a name="[121]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[22e]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[2a3]"></a>store_data</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, lora.o(i.store_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = store_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_key
</UL>

<P><STRONG><a name="[306]"></a>string_touint</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lora.o(i.string_touint))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = string_touint &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
</UL>

<P><STRONG><a name="[216]"></a>tanf</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, tanf.o(i.tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_6
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_3
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq_1
</UL>

<P><STRONG><a name="[2c9]"></a>tiny_sscanf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, tiny_sscanf.o(i.tiny_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_8_hhx
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_symbtimeout2LSB_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_symbtimeout1LSB_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sgm_set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mlon_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_md_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_lon_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_loggps_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hardware_ic_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ftime_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_application_port_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TDC_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RPL_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RJTDC_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PDOP_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NMEA886_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NMEA353_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_MOD_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_KAT_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DwellTime_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHS_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHE_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ACE_set
</UL>

<P><STRONG><a name="[2b3]"></a>usart1_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bsp_usart2.o(i.usart1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usart1_IRQHandler &rArr; GPS_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_usart
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1cd]"></a>usart1_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_usart2.o(i.usart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usart1_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; usart1_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[1bc]"></a>usart1_IoInit</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, bsp_usart2.o(i.usart1_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usart1_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[303]"></a>user_key_event</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, main.o(i.user_key_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = user_key_event &rArr; send_data &rArr; Send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_GPS_Send
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>vcom_DMA_TX_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vcom.o(i.vcom_DMA_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vcom_DMA_TX_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_6_7_IRQHandler
</UL>

<P><STRONG><a name="[262]"></a>vcom_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vcom.o(i.vcom_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = vcom_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[2ab]"></a>vcom_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vcom.o(i.vcom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vcom_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; usart1_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceInit
</UL>

<P><STRONG><a name="[1ba]"></a>vcom_IoInit</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, vcom.o(i.vcom_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vcom_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[130]"></a>vcom_ReceiveInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vcom.o(i.vcom_ReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vcom_ReceiveInit &rArr; HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>

<P><STRONG><a name="[2af]"></a>vcom_Trace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vcom.o(i.vcom_Trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_TxCpltCallback
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16a]"></a>GetLSIFrequency</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, iwdg.o(i.GetLSIFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetLSIFrequency &rArr; HAL_TIM_IC_ConfigChannel &rArr; TIM_TI2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_DeInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_RemapConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[299]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(i.GetFskBandwidthRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFskBandwidthRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[20f]"></a>__ARM_isinff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, filter.o(i.__ARM_isinff))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_5
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_4
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_1
</UL>

<P><STRONG><a name="[20e]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filter.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_5
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_4
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply_1
</UL>

<P><STRONG><a name="[19d]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[3e]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[41]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[3f]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[40]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[1af]"></a>UART_EndRxTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[2b1]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[1ae]"></a>UART_Receive_IT</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[112]"></a>ADC_Enable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[18b]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[184]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[179]"></a>DMA_SetConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1a4]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32l0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[1a5]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[1a0]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[1a1]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[152]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32l0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1c4]"></a>HW_GPIO_GetBitPos</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hw_gpio.o(i.HW_GPIO_GetBitPos))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>

<P><STRONG><a name="[1cf]"></a>HW_RTC_GetCalendarValue</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
</UL>

<P><STRONG><a name="[1d1]"></a>HW_RTC_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[1d7]"></a>HW_RTC_StartWakeUpAlarm</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, hw_rtc.o(i.HW_RTC_StartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[11]"></a>LORA_ConfirmClass</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.LORA_ConfirmClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = LORA_ConfirmClass &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>LORA_HasJoined</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, main.o(i.LORA_HasJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = LORA_HasJoined &rArr; Read_Config &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_joinmessage
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_GPS_Send
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_get
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>LORA_RxData</STRONG> (Thumb, 1534 bytes, Stack size 32 bytes, main.o(i.LORA_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = LORA_RxData &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_program_on_addr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_at_receive
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_set
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_set
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_application_port_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_set8channel_set
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_powerLED_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[300]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_event
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>OnIWDGRefreshTimeoutEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.OnIWDGRefreshTimeoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OnIWDGRefreshTimeoutEvent &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[47]"></a>OnTxTimerEvent</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.OnTxTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OnTxTimerEvent &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_GPS_Send
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_getState
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
</UL>
<BR>[Address Reference Count : 7]<UL><LI> main.o(i.OnTxTimerEvent2)
<LI> main.o(i.LORA_RxData)
<LI> main.o(i.lora_send)
<LI> main.o(i.main)
<LI> main.o(i.send_ALARM_data)
<LI> main.o(i.send_data)
<LI> main.o(i.timing)
</UL>
<P><STRONG><a name="[42]"></a>OnTxTimerEvent2</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(i.OnTxTimerEvent2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OnTxTimerEvent2 &rArr; OnTxTimerEvent &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_GPS_Send
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.LORA_HasJoined)
</UL>
<P><STRONG><a name="[29b]"></a>Send</STRONG> (Thumb, 1450 bytes, Stack size 80 bytes, main.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = Send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accel
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_getGPSState
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_application_port_get
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_JoinStatus
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountTurns
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalYaw
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRSupdate
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uplink
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[2f3]"></a>lora_send</STRONG> (Thumb, 1452 bytes, Stack size 24 bytes, main.o(i.lora_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = lora_send &rArr; send_data &rArr; Send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_INT_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_ON
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INPUT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_state_Led
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_getState
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_state_on
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_state_off
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_state_no
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetOffMode
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ALARM_data
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29e]"></a>printf_uplink</STRONG> (Thumb, 608 bytes, Stack size 24 bytes, main.o(i.printf_uplink))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = printf_uplink &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_state_on
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[43]"></a>timing</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(i.timing))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = timing &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.LORA_HasJoined)
</UL>
<P><STRONG><a name="[2e2]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reset
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_FDR
</UL>

<P><STRONG><a name="[2ed]"></a>changeform</STRONG> (Thumb, 126 bytes, Stack size 104 bytes, at.o(i.changeform))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = changeform &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_uint32_as_hhx
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_8_hhx
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>

<P><STRONG><a name="[2d0]"></a>print_16_02x</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, at.o(i.print_16_02x))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = print_16_02x &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_get
</UL>

<P><STRONG><a name="[2cc]"></a>print_8_02x</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, at.o(i.print_8_02x))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = print_8_02x &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_get
</UL>

<P><STRONG><a name="[2c8]"></a>print_d</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at.o(i.print_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = print_d &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_symbtimeout2LSB_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_symbtimeout1LSB_get
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sgm_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rssi_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mlon_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_lon_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_loggps_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_isack_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ftime_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_application_port_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_get
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TDC_get
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_get
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RPL_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RJTDC_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_MOD_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_KAT_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DwellTime_get
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHS_get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHE_get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ACE_get
</UL>

<P><STRONG><a name="[2df]"></a>print_u</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at.o(i.print_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = print_u &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_snr_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_get
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_get
</UL>

<P><STRONG><a name="[2d1]"></a>sscanf_16_hhx</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, at.o(i.sscanf_16_hhx))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = sscanf_16_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_set
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_set
</UL>

<P><STRONG><a name="[2cd]"></a>sscanf_8_hhx</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, at.o(i.sscanf_8_hhx))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = sscanf_8_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_set
</UL>

<P><STRONG><a name="[2db]"></a>sscanf_uint32_as_hhx</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, at.o(i.sscanf_uint32_as_hhx))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = sscanf_uint32_as_hhx &rArr; tiny_sscanf &rArr; tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_set
</UL>

<P><STRONG><a name="[2ca]"></a>translate_status</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at.o(i.translate_status))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_get
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_get
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_get
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_get
</UL>

<P><STRONG><a name="[3d]"></a>CMD_GetChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, command.o(i.CMD_GetChar))
<BR>[Address Reference Count : 1]<UL><LI> command.o(i.CMD_Init)
</UL>
<P><STRONG><a name="[133]"></a>com_error</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, command.o(i.com_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = com_error &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cmd
</UL>

<P><STRONG><a name="[132]"></a>parse_cmd</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, command.o(i.parse_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = parse_cmd &rArr; Store_Config &rArr; FLASH_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Config
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_key
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[44]"></a>McpsConfirm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora.o(i.McpsConfirm))
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.LORA_Init)
</UL>
<P><STRONG><a name="[45]"></a>McpsIndication</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lora.o(i.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = McpsIndication &rArr; certif_rx &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_running
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_DownLinkIncrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.LORA_Init)
</UL>
<P><STRONG><a name="[46]"></a>MlmeConfirm</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lora.o(i.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MlmeConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_running
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_linkCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(i.LORA_Init)
</UL>
<P><STRONG><a name="[1ff]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lora.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
</UL>

<P><STRONG><a name="[30b]"></a>tiny_vfscanf</STRONG> (Thumb, 592 bytes, Stack size 608 bytes, tiny_sscanf.o(i.tiny_vfscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tiny_vfscanf &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>

<P><STRONG><a name="[13a]"></a>ComputeNext125kHzJoinChannel</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, regionau915.o(i.ComputeNext125kHzJoinChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ComputeNext125kHzJoinChannel &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
</UL>

<P><STRONG><a name="[13c]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, regionau915.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
</UL>

<P><STRONG><a name="[26e]"></a>GetBandwidth</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, regionau915.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[271]"></a>GetNextLowerTxDr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regionau915.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
</UL>

<P><STRONG><a name="[124]"></a>AddMacCommand</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, loramac.o(i.AddMacCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AddMacCommand &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[135]"></a>CalculateBackOff</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, loramac.o(i.CalculateBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CalculateBackOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[4c]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, loramac.o(i.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[48]"></a>OnMacStateCheckTimerEvent</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, loramac.o(i.OnMacStateCheckTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = OnMacStateCheckTimerEvent &rArr; OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4e]"></a>OnRadioRxDone</STRONG> (Thumb, 1302 bytes, Stack size 128 bytes, loramac.o(i.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = OnRadioRxDone &rArr; ProcessMacCommands &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4f]"></a>OnRadioRxError</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, loramac.o(i.OnRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = OnRadioRxError &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[51]"></a>OnRadioRxTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, loramac.o(i.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = OnRadioRxTimeout &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4d]"></a>OnRadioTxDone</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, loramac.o(i.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = OnRadioTxDone &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[50]"></a>OnRadioTxTimeout</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, loramac.o(i.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = OnRadioTxTimeout &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4a]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, loramac.o(i.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4b]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, loramac.o(i.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionAU915RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[49]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, loramac.o(i.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[25b]"></a>ParseMacCommandsToRepeat</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, loramac.o(i.ParseMacCommandsToRepeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ParseMacCommandsToRepeat &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[254]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, loramac.o(i.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrepareRxDoneAbort &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[256]"></a>ProcessMacCommands</STRONG> (Thumb, 1288 bytes, Stack size 112 bytes, loramac.o(i.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = ProcessMacCommands &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[22c]"></a>ResetMacParameters</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, loramac.o(i.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[236]"></a>RxWindowSetup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramac.o(i.RxWindowSetup))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[253]"></a>ScheduleTx</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, loramac.o(i.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[23e]"></a>ValidatePayloadLength</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, loramac.o(i.ValidatePayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ValidatePayloadLength &rArr; RegionGetPhyParam &rArr; RegionAU915GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[55]"></a>OnCertifTxNextPacketTimerEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lora-test.o(i.OnCertifTxNextPacketTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = OnCertifTxNextPacketTimerEvent &rArr; certif_tx &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora-test.o(i.certif_rx)
</UL>
<P><STRONG><a name="[252]"></a>certif_tx</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, lora-test.o(i.certif_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = certif_tx &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionAU915TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTxNextPacketTimerEvent
</UL>

<P><STRONG><a name="[2a7]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timeserver.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[2a8]"></a>TimerSetTimeout</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[53]"></a>Trace_TxCpltCallback</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trace.o(i.Trace_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Trace_TxCpltCallback &rArr; vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Sense
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trace.o(i.TraceInit)
</UL>
<P><STRONG><a name="[2c2]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[304]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[2c3]"></a>mix_sub_columns</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[2c5]"></a>shift_sub_rows</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[2c4]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[2bf]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b5]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[2c1]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c0]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[54]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[3b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[10f]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[10e]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[110]"></a>_scanf_string</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
